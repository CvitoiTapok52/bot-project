import os
import cv2
from PIL import Image
from ultralytics import YOLO
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import uvicorn

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
subscribers = set()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_ADDRESS = range(1)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ –∏ –∞–¥—Ä–µ—Å–æ–≤
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
def detect_waste(image_path, model_path="runs/detect/train6/weights/best.pt"):
    model = YOLO(model_path)
    image = cv2.imread(image_path)
    if image is None:
        raise FileNotFoundError("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    results = model(image)
    if len(results[0].boxes) == 0:
        return None

    annotated_image = results[0].plot()
    temp_path = image_path.replace(".jpg", "_temp.jpg")
    cv2.imwrite(temp_path, annotated_image)
    return temp_path

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –º—É—Å–æ—Ä–µ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º—É—Å–æ—Ä, –∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –æ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω. "
        "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤–≤–µ–¥–∏—Ç–µ /help."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n"
        "/help - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ–ø–∏—Å–∞–Ω–∏—è.\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –º—É—Å–æ—Ä–µ.\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –æ–±—Ä–∞–±–æ—Ç–∞–ª –µ–≥–æ –∏ –Ω–∞—à–µ–ª –º—É—Å–æ—Ä. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è."
    )

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if user_id not in subscribers:
        subscribers.add(user_id)
        await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –º—É—Å–æ—Ä–µ.")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if user_id in subscribers:
        subscribers.remove(user_id)
        await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if user_id in subscribers:
        subscribers.remove(user_id)
    if user_id in user_data:
        del user_data[user_id]
    await update.message.reply_text(
        "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í—ã —Ç–∞–∫–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    photo_file = await update.message.photo[-1].get_file()
    original_file_path = f"photos/{user_id}_photo.jpg"

    os.makedirs("photos", exist_ok=True)
    await photo_file.download_to_drive(original_file_path)

    user_data[user_id] = {"photo_path": original_file_path}

    await update.message.reply_text(
        "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –º—É—Å–æ—Ä, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

    return WAITING_FOR_ADDRESS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    address = update.message.text

    if user_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return ConversationHandler.END

    photo_path = user_data[user_id].get("photo_path")
    processed_file_path = f"photos/{user_id}_photo_processed.jpg"

    try:
        annotated_image_path = detect_waste(
            image_path=photo_path,
            model_path="runs/detect/train6/weights/best.pt"
        )

        if annotated_image_path is None:
            await update.message.reply_text("–ú—É—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ —á–∏—Å—Ç–æ—Ç—É!")
        else:
            if os.path.exists(processed_file_path):
                os.remove(processed_file_path)
            os.rename(annotated_image_path, processed_file_path)

            await context.bot.send_photo(chat_id=user_id, photo=open(processed_file_path, "rb"))
            await update.message.reply_text("–í–∞—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!")

            for subscriber_id in subscribers:
                try:
                    await context.bot.send_message(
                        chat_id=subscriber_id,
                        text=f"–ú—É—Å–æ—Ä –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {address}"
                    )
                    await context.bot.send_photo(
                        chat_id=subscriber_id,
                        photo=open(processed_file_path, "rb")
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {subscriber_id}: {e}")

    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

    del user_data[user_id]
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if user_id in user_data:
        del user_data[user_id]
    await update.message.reply_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥—Ä–µ—Å–∞.")
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    TOKEN = "7539936945:AAEniNlf-c-Ag8JZ3RwsOSJQYlNV1XJC-5o"
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.PHOTO, handle_photo)],
        states={
            WAITING_FOR_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é uvicorn (–¥–ª—è Render)
    uvicorn.run(main, host="0.0.0.0", port=5000)







